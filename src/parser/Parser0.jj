PARSER_BEGIN(Parser0)

package parser;

import ast.*;
import java.util.Map;
import java.util.HashMap;

public class Parser0 {

}

PARSER_END(Parser0)

SKIP :
{
	" "
	|
	"\t"
	|
	"\r"
	|
	"\n"
}

TOKEN :
{
	< LCBRA : "{" >
	|
	< RCBRA : "}" >
	|
	< LET : "let" >
	|
	< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
	|
	< NUM: (["0"-"9"]) + >
	|
	< PLUS : "+" >
	|
	< MINUS : "-">
	|
	< TIMES : "*">
	|
	< DIV : "/">
	|
	< LPAR : "(" >
	|
	< RPAR : ")" >
	|
	< EQ : "=" >
	|
	< SEMI : ";" >
}

ASTNode Start() :
{
	ASTNode t = null;
}
{
	(
	t = Exp() <SEMI><SEMI>
	|
	<EOF>
	)
	{
		return t;
	}
}

ASTNode Exp() :
{
	Token op;
	ASTNode t1, t2;
}
{
	t1 = Term() ( ( op = <PLUS> | op = <MINUS> ) t2 = Term()
	{
		if (op.kind == PLUS)
			t1 = new ASTPlus(t1, t2);
		else
			t1 = new ASTSub(t1, t2);
	}
    ) *
    {
		return t1;
	}
}

ASTNode Term() :
{
	Token op;
	ASTNode t1, t2;
}
{
	t1 = Fact() ( ( op = <TIMES> | op = <DIV> ) t2 = Term()
    {
        if (op.kind == TIMES)
			t1 = new ASTTimes(t1, t2);
		else
			t1 = new ASTDiv(t1, t2);
	}
	) ?
	{
		return t1;
	}
}

ASTNode Fact() :
{
	Token n;
	ASTNode t;
}
{
	(
    n = <NUM>
	{
		t = new ASTNum(Integer.parseInt(n.image));
    }
	|
	<LPAR> t = Exp() <RPAR>
	|
	<MINUS>
	{
		t = new ASTNeg(Fact());
	}
	|
	<LCBRA> t = Scope() <RCBRA>
	|
	n = <ID>
	{
		t = new ASTId(n.image);
	}
	)
	{
		return t;
	}
}

ASTNode Scope() :
{
    Token id;
	ASTNode val, body;
	Map<String, ASTNode> variables = new HashMap<>();
}
{
	(
	<LET> id = <ID> <EQ> val = Exp() <SEMI>
	{
		variables.put(id.image, val);
	}
	) *
	body = Exp()
	{
		return new ASTScope(variables, body);
	}
}
